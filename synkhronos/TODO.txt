TODO yet... no particular order.


1. communicate output_subset to worker (or drop this functionality)
6. TESTS...
5. sliced functions for when data batch is too large for GPU
9. Another pass over for re-org and cleanup...lots of new little helper funcs.
11. Maybe use the input finder already in Theano function to do input checking in synk._call()
12. Make sure I understand what is return from gpu_comm.all_gather(r)
13. Make so can also do broadcast by passing shared_var instances, not just by name.
14. Possibly need to make the close procedure robust to errors in different places? And maybe so within worker?
9c. Make it so only functions exposed to user use g, the global struct, and all
other functions get passed to them the lowest structure that is needed.  The other functions can still modify by side-effect, but still it should be much easier to follow the code and know what the hell is going on.
9d. Give functions in master reference to avg_function of their outputs.
15. Make sure using "givens" param for theano function doesn't mess something up.




DONE
----
7. go back and check what other inputs there are for making a theano function,
   and see about supporting those---sure, just pass them on in.
9b. Make outputs a class, to help organize the functions that only are needed
   for outputs.  This class can exist only in master.
10. Maybe maybe the avg_fac a shared variable so it can sit on GPU but still be set if necessary.
9a. everything that takes inputs_global / shareds_global should be a method!
8. make theano shared var "scatter" possible using CPU shared memory
4. make it so some inputs get split among GPUs but other inputs get broadcast
2. implement "average" reduce operation
3. implement function to return input_shmems from function
3b. also make that function allocate shmems if provided with args?
